public class LowestCommonAncestorForBST {
    public static class TreeNode {
        int val;
        TreeNode left;
        TreeNode right;
        TreeNode(int x) {
            val = x;
        }
    }
    public TreeNode addNode(TreeNode root, int val) {
        if (val < root.val) {
            if (root.left == null) {
                root.left = new TreeNode(val);
            } else {
                addNode(root.left, val);
            }
        } else {
            if (root.right == null) {
                root.right = new TreeNode(val);
            } else {
                addNode(root.right, val);
            }
        }
        return root;
    }
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if(root.val > p.val && root.val > q.val){
            return lowestCommonAncestor(root.left, p, q);
        }else if(root.val < p.val && root.val < q.val){
            return lowestCommonAncestor(root.right, p, q);
        }else{
            return root;
        }
    }
    public static void main(String[] args) {
        LowestCommonAncestorForBST lowestCommonAncestorForBST = new LowestCommonAncestorForBST();
        int[] a = {2,3,4,1,8,9,7,6};
        TreeNode root = new TreeNode(5);

        for (int i : a) {
            lowestCommonAncestorForBST.addNode(root, i);
        }
        TreeNode p = new TreeNode(3);
        TreeNode q = new TreeNode(8);

        TreeNode common = lowestCommonAncestorForBST.lowestCommonAncestor(root, p , q);
        System.out.println(common.val);
    }
}
